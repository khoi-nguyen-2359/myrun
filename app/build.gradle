plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'kotlin-parcelize'
    id 'com.google.firebase.firebase-perf'
}

File localPropsFile = project.rootProject.file('local.properties')
Properties localProps = new Properties()
if (localPropsFile.exists()) {
    localProps.load(localPropsFile.newDataInputStream())
}

android {
    compileSdkVersion Versions.compileSdk

    defaultConfig {
        applicationId Versions.appId
        minSdkVersion Versions.minSdk
        targetSdkVersion Versions.targetSdk
        versionCode Versions.versionCode
        versionName Versions.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            storeFile file('./keystores/myrun_debug_key_v2.jks')
            storePassword 'myrundebugkeyv2'
            keyAlias = 'myrun_debug_key_v2'
            keyPassword 'myrundebugkeyv2'
        }
        rc {
            def path = localProps.getProperty('signing.rc.path') ?: "invalid"
            def password = localProps.getProperty('signing.rc.password')
            def alias = localProps.getProperty('signing.rc.alias')
            storeFile file(path)
            storePassword password
            keyAlias alias
            keyPassword password
        }
    }

    buildTypes {
        release {
            debuggable false

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        rc {
            initWith release
            debuggable true
            signingConfig signingConfigs.rc
        }

        debug {
            applicationIdSuffix ".debug"

            signingConfig signingConfigs.debug
        }
    }

    buildFeatures {
        viewBinding true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion libs.versions.compose.get()
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = "11"
        useIR = true
        allWarningsAsErrors = true
        freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(':data')
    implementation project(':data-impl')
    implementation project(':domain')
    implementation project(':places-sdk')

    debugImplementation project(":configurator")

    implementation(libs.kotlinxCoroutinesCore)
    implementation(libs.kotlinxCoroutinesAndroid)
    implementation(libs.kotlinxCoroutinesPlayServices)

    implementation(libs.daggerAndroid)
    kapt(libs.daggerCompiler)

    implementation(libs.androidXCore)
    implementation(libs.androidXAppCompat)
    implementation(libs.androidMaterial)
    implementation(libs.constraintLayout)
    implementation(libs.paging)
    implementation(libs.fragment)
    implementation(libs.activity)
    implementation(libs.workManager)
    implementation(libs.splashScreen)

    implementation(libs.bundles.compose)
    implementation(libs.coilCompose)
    implementation(libs.accompanistPlaceholder)

    implementation(libs.multidex)

    implementation(libs.playServicesLocation)
    implementation(libs.playServicesAuth)
    implementation(libs.playServicesFitness)

    implementation platform(libs.firebaseBom)
    implementation(libs.firebaseAuthKtx)
    implementation(libs.firebaseFirestoreKtx)
    implementation(libs.firebaseCrashlyticsKtx)
    implementation(libs.firebaseAnalyticsKtx)
    implementation(libs.firebaseStorageKtx)
    implementation(libs.firebasePerfKtx)

    implementation(libs.androidMapUtils)
    implementation(libs.androidGoogleMap)

    implementation(libs.roomRuntime)

    implementation(libs.okHttp)
    implementation(libs.okHttpLogger)

    implementation(libs.retrofit)
    implementation(libs.retrofitGsonConverter)

    implementation(libs.lifecycleRuntimeKtx)
    implementation(libs.lifecycleLiveDataKtx)
    implementation(libs.lifecycleViewModelKtx)
    implementation(libs.lifecycleCommonJava8)
    implementation(libs.lifecycleProcess)

    implementation(libs.timber)

    implementation(libs.glide)
    kapt(libs.glideCompiler)

    implementation(libs.facebookLogin)

    if (localProps.getProperty("leakcanary.enabled", "1") == "1") {
        debugImplementation(libs.leakCanary)
    }

    testImplementation(testFixtures(project(':test')))
    testImplementation(libs.junit)
    testImplementation(libs.kotlinTest)
    testImplementation(libs.kotlinCoroutinesTest)
    testImplementation(libs.androidXCoreTesting)
    testImplementation(libs.mockitoCore)
    testImplementation(libs.mockitoKotlin)
    testImplementation(libs.turbine)
    testImplementation(libs.kotlinReflect)
    kaptAndroidTest(libs.daggerCompiler)
    androidTestImplementation(libs.mockitoAndroid)
    androidTestImplementation(libs.androidXTestRunner)
    androidTestImplementation(libs.espressoCore)
    androidTestImplementation(libs.espressoContrib)
    androidTestImplementation(libs.androidXTestRules)
    androidTestImplementation(libs.androidXJunit)
    androidTestImplementation(libs.uiAutomator)
}
