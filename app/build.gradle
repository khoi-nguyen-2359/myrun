plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'kotlin-parcelize'
    id 'com.google.firebase.firebase-perf'
    id "build-time-tracker"
}

File localPropsFile = project.rootProject.file('local.properties')
Properties localProps = new Properties()
if (localPropsFile.exists()) {
    localProps.load(localPropsFile.newDataInputStream())
}

android {
    compileSdkVersion project.compileSdk

    defaultConfig {
        applicationId project.appId
        minSdkVersion project.minSdk
        targetSdkVersion project.targetSdk
        versionCode project.versionCode
        versionName project.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            storeFile file('./keystores/myrun_debug_key_v2.jks')
            storePassword 'myrundebugkeyv2'
            keyAlias = 'myrun_debug_key_v2'
            keyPassword 'myrundebugkeyv2'
        }
        rc {
            def path = localProps.getProperty('signing.rc.path') ?: "invalid"
            def password = localProps.getProperty('signing.rc.password')
            def alias = localProps.getProperty('signing.rc.alias')
            storeFile file(path)
            storePassword password
            keyAlias alias
            keyPassword password
        }
    }

    buildTypes {
        release {
            debuggable false

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        rc {
            initWith release
            debuggable true
            signingConfig signingConfigs.rc
        }

        debug {
            applicationIdSuffix ".debug"

            signingConfig signingConfigs.debug
        }
    }

    buildFeatures {
        viewBinding true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion libs.versions.compose.get()
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = "11"
        useIR = true
        allWarningsAsErrors = true
        freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
    }

    lintOptions {
        disable 'NullSafeMutableLiveData' // bypass this bug https://issuetracker.google.com/issues/169249668
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(':features:base')
    implementation project(':features:registration')
    implementation project(":features:profile")
    implementation project(":features:activitydetail")

    debugImplementation project(":features:configurator")

    implementation(project(':wiring'))

    implementation project(':common:feature')
    implementation project(':common:wiring')
    implementation project(':common:data')

    implementation project(':worker')
    implementation(libs.workManager) // still needed when using module 'worker'

    implementation(libs.googlePlaces)

    implementation(libs.kotlinxCoroutinesCore)
    implementation(libs.kotlinxCoroutinesPlayServices)

    implementation(libs.dagger)
    kapt(libs.daggerCompiler)

    implementation(libs.androidXCore)
    implementation(libs.androidXAppCompat)
    implementation(libs.androidMaterial)
    implementation(libs.constraintLayout)
    implementation(libs.paging)
    implementation(libs.fragment)
    implementation(libs.activity)
    implementation(libs.splashScreen)

    implementation(libs.lifecycleRuntimeKtx)
    implementation(libs.lifecycleLiveDataKtx)
    implementation(libs.lifecycleViewModelKtx)
    implementation(libs.lifecycleCommonJava8)
    implementation(libs.lifecycleProcess)

    implementation(libs.bundles.compose)
    implementation(libs.coilCompose)
    implementation(libs.accompanistPlaceholder)
    implementation(libs.accompanistInsets)

    implementation(libs.multidex)

    implementation(libs.playServicesAuth)
    implementation(libs.playServicesFitness)

    implementation platform(libs.firebaseBom)
    implementation(libs.bundles.crashlytics)
    implementation(libs.firebasePerfKtx)

    implementation(libs.androidMapUtils)
    implementation(libs.androidGoogleMap)

    implementation(libs.timber)

    if (localProps.getProperty("leakcanary.enabled", "1") == "1") {
        debugImplementation(libs.leakCanary)
    }

    testImplementation(testFixtures(project(':test')))
    testImplementation(libs.bundles.testCoroutine)
    testImplementation(libs.junit)
    testImplementation(libs.kotlinTest)
    testImplementation(libs.androidXCoreTesting)
    testImplementation(libs.mockitoCore)
    testImplementation(libs.mockitoKotlin)
    testImplementation(libs.kotlinReflect)
    kaptAndroidTest(libs.daggerCompiler)
    androidTestImplementation(libs.mockitoAndroid)
    androidTestImplementation(libs.androidXTestRunner)
    androidTestImplementation(libs.espressoCore)
    androidTestImplementation(libs.espressoContrib)
    androidTestImplementation(libs.androidXTestRules)
    androidTestImplementation(libs.androidXJunit)
    androidTestImplementation(libs.uiAutomator)
}

buildtimetracker {
    reporters {
        csv {
            output "build/times.csv"
            append true
            header true
        }

        summary {
            ordered false
            threshold 500
            barstyle "unicode"
            shortenTaskNames false
        }

        csvSummary {
            csv "build/times.csv"
        }
    }
}
