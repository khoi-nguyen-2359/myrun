plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'kotlin-parcelize'
    id 'com.google.firebase.firebase-perf'
    id "build-time-tracker"
}

android {
    compileSdkVersion project.compileSdk

    defaultConfig {
        applicationId project.appId
        minSdkVersion project.minSdk
        targetSdkVersion project.targetSdk
        versionCode project.versionCode
        versionName project.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            storeFile file('./keystores/myrun_debug_key_v2.jks')
            storePassword 'myrundebugkeyv2'
            keyAlias = 'myrun_debug_key_v2'
            keyPassword 'myrundebugkeyv2'
        }
        rc {
            def path = project.localProps['signing.rc.path'] ?: "invalid"
            def password = project.localProps['signing.rc.password']
            def alias = project.localProps['signing.rc.alias']
            storeFile file(path)
            storePassword password
            keyAlias alias
            keyPassword password
        }
    }

    buildTypes {
        release {
            debuggable false

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        rc {
            initWith release
            debuggable true
            signingConfig signingConfigs.rc
        }

        debug {
            applicationIdSuffix ".debug"

            signingConfig signingConfigs.debug
        }
    }

    buildFeatures {
        viewBinding true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion libs.versions.compose.get()
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = "11"
        useIR = true
        allWarningsAsErrors = true
        freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
    }

    lintOptions {
        disable 'NullSafeMutableLiveData' // bypass this bug https://issuetracker.google.com/issues/169249668
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(':data:wiring')
    implementation project(':data:common')
    implementation(project(':data:authentication:wiring'))
    implementation(project(':data:tracking:wiring'))
    implementation(project(':data:activity:api'))

    implementation project(':worker')
    implementation project(':feature:common')
    implementation project(':feature:registration')
    implementation project(":feature:profile")
    implementation project(":feature:home")
    implementation project(":feature:activity")
    implementation project(":feature:tracking")
    implementation project(":feature:route")
    debugImplementation project(":feature:configurator")

    implementation(libs.workManager) // to config work manager in application class

    implementation(libs.googlePlaces)   // to init place sdk in application class

    implementation(libs.kotlinxCoroutinesCore)
    implementation(libs.kotlinxCoroutinesPlayServices)

    implementation(libs.dagger)
    kapt(libs.daggerCompiler)

    implementation(libs.androidXCore)
    implementation(libs.androidXAppCompat)
    implementation(libs.splashScreen)

    implementation(libs.lifecycleProcess)

    implementation(libs.bundles.compose)
    implementation(libs.accompanistInsets)

    implementation(libs.multidex)

    implementation(libs.playServicesAuth)
    implementation(libs.playServicesFitness)

    implementation(libs.firebaseBom)
    implementation(libs.firebasePerfKtx)

    implementation(libs.bundles.crashlytics)

    implementation(libs.timber)

    if (localProps.getProperty("leakcanary.enabled", "1") == "1") {
        debugImplementation(libs.leakCanary)
    }

    testImplementation(libs.kotlinTest)
}

buildtimetracker {
    reporters {
        csv {
            output "build/times.csv"
            append true
            header true
        }

        summary {
            ordered false
            threshold 500
            barstyle "unicode"
            shortenTaskNames false
        }

        csvSummary {
            csv "build/times.csv"
        }
    }
}
