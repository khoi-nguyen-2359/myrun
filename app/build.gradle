plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'kotlin-parcelize'
    id 'com.google.firebase.firebase-perf'
}

Properties localProps = new Properties()
localProps.load(project.rootProject.file('local.properties').newDataInputStream())

android {
    compileSdkVersion Versions.compileSdk

    defaultConfig {
        applicationId "akio.apps.myrun"
        minSdkVersion Versions.minSdk
        targetSdkVersion Versions.targetSdk
        versionCode Versions.versionCode
        versionName Versions.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            storeFile file('./keystores/myrun_debug_key_v2.jks')
            storePassword 'myrundebugkeyv2'
            keyAlias = 'myrun_debug_key_v2'
            keyPassword 'myrundebugkeyv2'
        }
        rc {
            def path = localProps.getProperty('signing.rc.path')
            def password = localProps.getProperty('signing.rc.password')
            def alias = localProps.getProperty('signing.rc.alias')
            storeFile file(path)
            storePassword password
            keyAlias alias
            keyPassword password
        }
    }

    buildTypes {
        release {
            debuggable false

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        rc {
            initWith release
            debuggable true
            signingConfig signingConfigs.rc
        }

        debug {
            applicationIdSuffix ".debug"

            signingConfig signingConfigs.debug
        }
    }

    buildFeatures {
        viewBinding true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion Versions.compose
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = "11"
        useIR = true
        allWarningsAsErrors = true
        freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(':data')
    implementation project(':data-impl')
    implementation project(':domain')

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$Versions.coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$Versions.coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:$Versions.coroutines"

    implementation "com.google.dagger:dagger-android:$Versions.dagger"
    kapt "com.google.dagger:dagger-compiler:$Versions.dagger"

    implementation "androidx.core:core:$Versions.androidxCore"
    implementation "androidx.appcompat:appcompat:$Versions.appCompat"
    implementation "androidx.constraintlayout:constraintlayout:$Versions.constraintLayout"
    implementation "androidx.paging:paging-runtime-ktx:$Versions.paging"
    implementation "androidx.fragment:fragment-ktx:$Versions.fragment"
    implementation "androidx.activity:activity-ktx:$Versions.activity"
    implementation "androidx.work:work-runtime-ktx:$Versions.workManager"
    implementation "com.google.android.material:material:$Versions.androidMaterial"

    implementation "androidx.compose.ui:ui:$Versions.compose"
    implementation "androidx.compose.ui:ui-tooling:$Versions.compose"
    implementation "androidx.compose.foundation:foundation:$Versions.compose"
    implementation "androidx.compose.material:material:$Versions.compose"
    implementation "androidx.compose.material:material-icons-core:$Versions.compose"
    implementation "androidx.compose.material:material-icons-extended:$Versions.compose"
    implementation "androidx.compose.runtime:runtime-livedata:$Versions.compose"
    implementation "androidx.compose.runtime:runtime-rxjava2:$Versions.compose"
    implementation "androidx.activity:activity-compose:$Versions.activity"
    implementation "androidx.paging:paging-compose:$Versions.pagingCompose"

    implementation "com.android.support:multidex:$Versions.multidex"

    implementation "com.google.android.gms:play-services-location:$Versions.playServicesLocation"
    implementation "com.google.android.gms:play-services-auth:$Versions.playServicesAuth"
    implementation "com.google.android.gms:play-services-fitness:$Versions.playServicesFitness"

    implementation platform("com.google.firebase:firebase-bom:$Versions.firebaseBom")
    implementation 'com.google.firebase:firebase-auth-ktx'
    implementation 'com.google.firebase:firebase-firestore-ktx'

    implementation project(':places-sdk')
    implementation "com.google.maps.android:android-maps-utils-v3:$Versions.androidMapUtils"
    implementation "com.google.android.libraries.maps:maps:$Versions.androidGoogleMap"

    implementation platform("com.google.firebase:firebase-bom:$Versions.firebaseBom")
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-storage-ktx'
    implementation 'com.google.firebase:firebase-perf-ktx'

    implementation "androidx.room:room-runtime:$Versions.room"

    implementation "com.squareup.okhttp3:okhttp:$Versions.okhttp"
    implementation "com.squareup.okhttp3:logging-interceptor:$Versions.okhttp"

    implementation "com.squareup.retrofit2:retrofit:$Versions.retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$Versions.retrofit"

    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$Versions.lifecycle"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$Versions.lifecycle"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$Versions.lifecycle"
    implementation "androidx.lifecycle:lifecycle-common-java8:$Versions.lifecycle"
    implementation "androidx.lifecycle:lifecycle-process:$Versions.lifecycle"

    implementation "com.jakewharton.timber:timber:$Versions.timber"

    implementation "com.github.bumptech.glide:glide:$Versions.glide"
    kapt "com.github.bumptech.glide:compiler:$Versions.glide"

    implementation "io.coil-kt:coil-compose:$Versions.coil"
    implementation "com.google.accompanist:accompanist-flowlayout:$Versions.accompanist"
    implementation "com.google.accompanist:accompanist-placeholder-material:$Versions.accompanist"

    implementation "com.facebook.android:facebook-login:$Versions.facebookSdk"

    debugImplementation project(":configurator")
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$Versions.leakCanary"

    implementation "androidx.core:core-splashscreen:$Versions.splashScreen"

    testImplementation(testFixtures(project(':test')))
    testImplementation "junit:junit:$Versions.junit"
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$Versions.coroutines"
    testImplementation "androidx.arch.core:core-testing:$Versions.androidXCoreTesting"
    testImplementation "org.mockito:mockito-core:$Versions.mockitoCore"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$Versions.mockitoKotlin"
    testImplementation "app.cash.turbine:turbine:$Versions.turbine"
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$Versions.kotlin"
    kaptAndroidTest "com.google.dagger:dagger-compiler:$Versions.dagger"
    androidTestImplementation "org.mockito:mockito-android:$Versions.mockitoAndroid"
    androidTestImplementation "androidx.test:runner:$Versions.androidXTestRunner"
    androidTestImplementation "androidx.test.espresso:espresso-core:$Versions.espresso"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$Versions.espresso"
    androidTestImplementation "androidx.test:rules:$Versions.androidXTestRules"
    androidTestImplementation "androidx.test.ext:junit:$Versions.androidXJunit"
    androidTestImplementation "androidx.test.uiautomator:uiautomator:$Versions.uiAutomator"
}
