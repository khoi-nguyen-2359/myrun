plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
}

android {
    compileSdk project.compileSdk

    defaultConfig {
        minSdk project.minSdk

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        rc {
            debuggable true
        }
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion libs.versions.compose.get()
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = "11"
        useIR = true
        allWarningsAsErrors = true
        freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
    }
}

dependencies {
    implementation(project(':feature:core'))

    implementation(project(':domain'))

    implementation(project(':data:user'))
    implementation(project(':data:eapps'))
    implementation(project(':data:activity'))
    implementation(project(':data:tracking'))
    implementation(project(':data:location'))

    implementation(project(":base:di"))
    implementation(project(':base:firebase'))
    implementation(libs.bundles.firebase.data)

    implementation(project(':worker'))

    implementation(libs.playservices.location)
    implementation(libs.googleplaces)

    implementation(libs.kotlinx.coroutines.play.services)

    implementation(libs.constraintlayout)
    implementation(libs.androidmaterial)

    implementation(libs.bundles.compose)

    implementation(libs.room.ktx)

    implementation(libs.androidx.appcompat)
    implementation(libs.timber)

    implementation(libs.lifecycle.viewmodel.ktx)
    implementation(libs.lifecycle.livedata.ktx)

    implementation(libs.googlemaps.androidutils)
    implementation(libs.playservices.map)

    implementation(libs.dagger)
    implementation(libs.anvil.annotations)
    kapt(libs.daggercompiler)

    implementation(libs.okhttp)

    testImplementation(testFixtures(project(':test')))
    testImplementation(libs.bundles.testCoroutine)
    testImplementation(libs.junit)
    testImplementation(libs.kotlintest)
    testImplementation(libs.androidx.coretesting)
    testImplementation(libs.mockito.kotlin)
    testImplementation(libs.mockito.inline)
    testImplementation(libs.kotlinreflect)
}
